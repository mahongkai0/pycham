

1.硬件与软件
    1.硬件
        一台主机
    2.软件
        一个能够接受用户请求并给出响应的程序
        1.APACHE
        2.TOMCAT
        3.IIS(Internet Information Service)
        4.Nginx
    3.作用
        1.存储WEB信息
        2.处理用户的请求(request)和响应(response)
        3.执行服务器端程序
        4.具备最基本的安全功能

3.框架
    1.什么是框架
        框架是一个为了解决开放性问题而存在的一种程序结构
        框架本身提供了最基本的一些功能
        我们只需要在基本功能上搭建自己的操作就可以了
    2.python web 框架
        1.Flask - 轻量级
        2.Webpy - 轻量级
        3.Tornado - 异步框架
        4.Django - 重量级
    3.框架模式
        1.MTV
            M：Models模型层，主要负责数据库建模
            T：Templates，模板层，处理用户的显示内容，如html
            V：Views，视图层，处理与用户打交道的内容，即请求和响应的处理
        2.MVC
            M：Models模型层，负责数据库的建模        -- M(MTV)
            V：Views，视图层，处理用户的显示内容(html)  -- T(MTV)
            C：Controller，控制器，处理与用户交互相关内容  -- V(MTV)

4.IDE - PyCharm

5.Flask框架
    1.什么是Flask
        Flask是一个基于Python并且依赖于Jinja2模板引擎和Werkzeug WSGI 服务的一个微型框架(Micro Framework)
        WSGI:Web Server Gateway Interface(WEB五福网关接口)
        官网：http://flask.pocoo.org/
        Flask 采用MTV的框架模式

    2.安装Flask
        1.查看已安装的Flask版本
            在python的交互模式中
                1.import flask
                    没报错：已经安装了Flask，可以继续查看版本
                    报错：没安装Flask
                2.flask.__version__
                    查看Flask的版本
        2.在线安装
            sudo pip3 install flask

            sudo pip3 install flask安装包路径/名称
        3.Flask 初始化



练习
1.创建run02.py文件 搭建flase结构
2.访问路径： 127.0.0.1:5000/login
3.访问路径： 127.0.0.1:5000/register
    网页中显示：欢迎访问注册页面

ALT + 回车  快速导包快捷键

4.强制关闭flask服务
    1.查询 Flask服务的进程ID
    netstat -lptu
    2.杀掉指定PID的进程 杀两次哦
        sudo kill -9 PID


6。Flask-路由（route）
    1.什么是路由
            路由是处理url与视图函数关系的程序
    2.路由的体现
        在flase中 路由是通过 @app.runte 装饰器来表示的
        1.路由的基本体现
            #127.0.0.1:5000/
            #localhost:5000/
            #app.route('/')
            def index('/')
                return xxx
        2.带参数的路由
            参数在路由器中是一个不确定的数据 根据访问时的路径向里传播

            1.基本的带参路由
                #127.0.0.1:5000/news/2018
                #127.0.0.1:5000/news/2017
                @app.route('/news/<year>')
                def news(year):
                    year:表示的是地址栏上传过来的数据

            2.带多个参数的路由

                #127.0.0.1:5000/news/2018/7
                #127.0.0.1:5000/news/2015/8
              @app.route('/news/<year>/<month>')

            3.指定参数类型的路由
                #127.0.0.：5000/info/mengmeng/20
                #127.0.0.1:5000/info/weige/47
                @app.route（'/info/<name>/<int:age>'）
            int: 类型转换器‘
            Flask中所支持的类型转换器’
            类型转换器   作用
            缺省          字符串 不能有斜杠（‘/’）
            int：        整数
            float：       小数
            path：          字符串 可以有斜杠（‘/’）


        3.多 URL的路由配置
            127.0.0.1:5000/
            127.0.0.0:5000/index
            实现方案
            @append。route（‘/地址1’）
            @append。route（‘/地址2’）
            ...
            def index():
                xxx xxx

        练习
            当访问路径是以下任何一个的时候
             127.0.0.1:5000/
             127.0.0.1:5000/index
             127.0.0.1:5000/数字
             127.0.0.1:5000/index/数字
             将程序交给index（）视图处理函数
             根据数字的传递情况给出响应
             如果传递数字到路由中
             响应;您当前看的页数为xxx
             如果没有传递数字到路由中
             响应 ：您当前看的页数为1

    3.URL的反向解析
        正向解析：程序自动解析，根据@app.route()中的访问路径，来匹配处理函数
        反向解析;通过视图处理函数的名称生成对应的访问路径

    在Flask 中实现反向解析
        from flask import url_fo
        语法：
            url_for(funName[,args])
            funName:要生成地址的函数名
            args:地址中需要的参数，可选的
           返回值： 字符串 对应的访问地址


zuoye :
    Flask项目 -Blog
    创建路由： /-》首页
    创建路由 /register   注册页
    创建路由    /list  列表页
    创建路由 /info   详情页






































