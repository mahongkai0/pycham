session -会话

当浏览器打开时 跟一个服务器交互的完整过程就是一次会话
    session 目的：  保存会话中所涉及到的一些信息
    session 表现：  在服务器上会为每个浏览器开辟一段空间，就是为了保存
                    当前浏览器和服务器在会话过程中所涉及到的一些信息

2.session 在flask中的实现
    1.配置SECRET_KEY
        app.config['SECRET+KEY']='写啥都行'

    2.使用session
        from flask import session
            1.向session中保存数据
                session['key'] = value
            2.从session中获取数据
                session['key']
                session.get('key')
            3.从session中删除数据
                del session['key']

        见 day8.py

3.session PK cookie
    1.cookie
        1.保存在客户端[位置]
        2.长久保存
        3， 因为是明文，可以修改 安全性较低【安全】

    2.session
        1.保存在服务器端[位置]
        2.临时储存平【时长】
        3.安全性较高【安全】

1.AJAX
1.什么是AJAX
    Asynchronous javascript And Xml
    异步          js       和   xml
    通过 JS异步的向服务器发送请求并接受响应

    异步访问：
        当浏览器向服务器发送请求时 服务器在做处理的同时，浏览器可以做其他的操作
    同步访问：
        当浏览器向服务器发送请求时 服务器在做处理时 浏览器只能等待

    AJAX 优点
        1，异步 访问
         2.局部 刷新
       使用场合
        1.搜索建议
        2.表单验证
        3.前后端完全分离（SPA）Single Page Application


    2.AJAX 核心对象-异步对象（XMLHttpRequest）
        1.什么是XMLHttpRequest
            简称为 xhr
            代替浏览器向服务器发送异步的请求并接受响应
        xhr是由 javascript 来提供的
        2.创建异步对象（xhr）
            主流的异步对象是XMLHttpRequest 类型的 并且主流的浏览器（IE7，Chrome，Firefox，Safari，Opera）
            全部支持 但在IE低版本浏览器中（IE7以及一下） 就不支持XMLHttpRequest，需要使用ActiveXobject
            来创建

            XMLHttpRequest:
                var xhr = new XMLHttpRequest();
            ActiveXObject:
                var xhr = new
                ActiveXobject("Microsoft.XMLHTTP");

               1. 创建一个新的flask项目  AjaxDemo01
                2.创建 templates 和 static 目录
                3. static 中创建一个js的目录 在js中创建一个commin。js
                4. common.js 中
                    1.创建一个函数 createXhr()
                    2.函数内部判断浏览器和xhr的支持性返回不同的xhr对象

        3. xhr的成员
            1.方法 open()
                作用： 创建请求
                语法： xhr.open(method,url,async)
                method：请求方式  取值 get 或 post
                url： 请求地址  取值为字符串
                async： 是否采用异步的方式
                    true： 使用异步方式
                    false： 使用同步方式
            2. 属性 - readyState
                 作用： 请求状态，通过不同的请求状态值来表示xhr与服务器的交互情况
                 由0-4共5个值来表示5个不同的状态

                0： 请求尚未初始化
                1：  已经与服务器建立连接
                2. 服务器端已经接受请求
                3. 表示请求正在处理中
                4. 响应已完成


            3.属性- status
                作用： 表示服务器端的响应状态码
                    200： 服务器正确处理所有的请求并给出响应
                    500： 服务器内部错误
                    404： 请求资源不存在

            4.属性  -  responseText
                作用： 服务器端响应回来的数据


            5.事件    -  onreadystatechange
            作用; 每当xhr的readyState属性值发生改变的时候要触发的操作 -回调函数
            xhr.onreadystatechange = function(){
                //当xhr的值为4 并且status的值为200的时候 就可以接受响应数据了
            }

            6.方法 send（）
                 作用： 通知xhr向服务器端发送请求
                 语法： xhr.send(body)
                    get请求; body 的值为null
                    post请求： 要请求提交的数据


        4.  AJAX的操作步骤
            1. GET 请求
                1.创建xhr对象
                2，创建请求 - open()
                3,设置回调函数 - opreadystatechabge
                    判断状态并接受响应数据
                4.发送请求 - send()     方法

        请求参数
            在请求地址后拼QueryString
                xhr。open('get','/01-server?name=val&name=val',true)


    排错手段
    1.检查控制台,控制台如果没有任何提示
        1.检查发送请求 xhr.send(null)
        2.检查 xhr.onreadystatechage 是否写错
        3.检查 xhr.readyState 以及 xhr.status


    查看请求和响应的信息 分析具体错误
        404：请求地址不正确
        500： 服务端内部错误


作业：
    1.创建数据库
        ajax
      2.创建实体类 Users
      id  主键 自增
      uname 用户名
      upwd 用户密码
      nickname  昵称
      映射回数据库生成表
    3.向Users表中插入数据】
        当光标从用户名称文本框失去焦点时  onblur
       的时候 验证用户数据在Users表中是否存在 并给出提示


























































































